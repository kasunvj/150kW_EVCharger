/// <reference types="node" />
/// <reference types="node" />
import * as fs from "fs";
export declare class J1939 {
    AAC: number;
    Function: number;
    Vehicle: number;
    Identity: number;
    Industry: number;
    System: number;
    Manufacture: number;
    constructor(AAC: number, Function: number, Vehicle: number, Identity: number, Industry: number, System: number, Manufacture: number);
    getName(): Buffer;
}
interface SignalRef {
    id: number;
    signal_name: string;
}
export declare class BusRefs {
    produces: number[];
    consumes: SignalRef[];
}
export declare class Node {
    id: number;
    name: string;
    device: object;
    j1939: J1939;
    buses: Record<string, BusRefs>;
    constructor(id: number, name: string, device: object, j1939: J1939);
}
export declare class Signal {
    name: string;
    spn: string;
    bitOffset: number;
    bitLength: number;
    endianess: "little" | "big";
    labels: Record<number, string>;
    mux: number;
    slope: number;
    intercept: number;
    unit: string;
    type: "signed" | "unsigned";
    defaultValue: number;
    minValue?: number | undefined;
    maxValue?: number | undefined;
    constructor(name: string, spn: string, bitOffset: number, bitLength: number, endianess: "little" | "big", labels: Record<number, string>, mux: number, slope?: number, intercept?: number, unit?: string, type?: "signed" | "unsigned", defaultValue?: number, minValue?: number | undefined, maxValue?: number | undefined);
}
export declare class NodeRef {
    id: number;
    constructor(id: number);
}
export declare class Mux {
    name: string;
    offset: number;
    length: number;
    constructor(name: string, offset: number, length: number);
}
export declare class Message {
    name: string;
    id: number;
    ext: boolean;
    triggered: boolean;
    length: number;
    interval: number;
    muxed: boolean;
    mux?: Mux | undefined;
    signals: Signal[];
    producers: NodeRef[];
    constructor(name: string, id: number, ext: boolean, triggered: boolean, length: number, interval: number, muxed: boolean, mux?: Mux | undefined);
}
export declare class Bus {
    messages: Message[];
}
export declare class CanNetwork {
    nodes: Record<string, Node>;
    buses: Record<string, Bus>;
}
export declare function parseKcdFile(file: fs.PathOrFileDescriptor): CanNetwork;
export {};
//# sourceMappingURL=parse_kcd.d.ts.map